<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, viewport-fit=cover">
    <meta name="format-detection" content="telephone=no,email=no,adress=no">
    <script type="text/javascript">
        (function (win, tcf) {
            var doc = win.document;
            var docEl = doc.documentElement;
            var metaEl = doc.querySelector('meta[name="viewport"]');
            var dpr = 0;
            var scale = 0;
            var handler = null;
            var flexible = tcf.flexible || (tcf.flexible = {});
            //将根据已有的meta标签来设置缩放比例
            if (metaEl) {
                var match = metaEl.getAttribute('content').match(/initial\-scale=([\d\.]+)/);
                if (match) {
                    scale = parseFloat(match[1]);
                    dpr = parseInt(1 / scale);
                }
            }
            //如果没有设置，那么会自动添加meta viewport的设置
            if (!dpr && !scale) {
                var isAndroid = win.navigator.appVersion.match(/android/gi);
                var isIPhone = win.navigator.appVersion.match(/iphone/gi);
                var isLiebao = win.navigator.appVersion.match(/LieBao/gi);
                var isSogou = win.navigator.appVersion.match(/Sogou/gi);
                var clsName = String(isIPhone || isLiebao || isSogou || isAndroid || '').toLowerCase();
                var devicePixelRatio = Math.floor(win.devicePixelRatio) || 1;
                if (isIPhone) {
                    if (devicePixelRatio >= 3 && (!dpr || dpr >= 3)) {
                        dpr = 3;
                    } else if (devicePixelRatio >= 2 && (!dpr || dpr >= 2)) {
                        dpr = 2;
                    } else {
                        dpr = 1;
                    }
                } else if (isLiebao || isSogou) {
                    dpr = 1;
                } else {
                    dpr = devicePixelRatio;
                }
                doc.body.classList.add(clsName);
                scale = 1 / dpr;
            }
            if (!metaEl) {
                metaEl = doc.createElement('meta');
                metaEl.setAttribute('name', 'viewport');
                metaEl.setAttribute('content', 'initial-scale=' + scale + ', maximum-scale=' + scale + ', minimum-scale=' + scale + ',user-scalable=no');
                if (docEl.firstElementChild) {
                    docEl.firstElementChild.appendChild(metaEl);
                } else {
                    var wrap = doc.createElement('div');
                    wrap.appendChild(metaEl);
                    doc.write(wrap.innerHTML);
                }
            }
            docEl.setAttribute('data-dpr', dpr);
            var setFontSize = function () {
                var width = docEl.getBoundingClientRect().width == 0 ? window.screen.width : docEl.getBoundingClientRect().width;
                if (width / dpr > 540) {
                    width = 540 * dpr;
                }
                var rem = width / 10;
                rem = Math.max(rem, 32);
                docEl.style.fontSize = rem + 'px';
                flexible.width = width;
                flexible.rem = win.rem = rem;
            };

            ['resize', 'orientationchange'].forEach(function (item) {
                win.addEventListener(item, function (e) {
                    clearTimeout(handler);
                    handler = setTimeout(setFontSize, 300);
                }, false);
            })
            win.addEventListener('pageshow', function (e) {
                if (e.persisted) {
                    clearTimeout(handler);
                    handler = setTimeout(setFontSize, 300);
                }
            }, false);
            if (doc.readyState === 'complete') {
                doc.body.style.fontSize = 12 * dpr + 'px';
            } else {
                doc.addEventListener('DOMContentLoaded', function (e) {
                    doc.body.style.fontSize = 12 * dpr + 'px';
                }, false);
            }
            setFontSize();
            flexible.dpr = win.dpr = dpr;
            flexible.setFontSize = setFontSize;
            flexible.rem2px = function (d) {
                var val = parseFloat(d) * this.rem;
                if (typeof d === 'string' && d.match(/rem$/)) {
                    val += 'px';
                }
                return val;
            }
            flexible.px2rem = function (d) {
                var val = parseFloat(d) / this.rem;
                if (typeof d === 'string' && d.match(/px$/)) {
                    val += 'rem';
                }
                return val;
            }
        }(window, window['tcf'] || (window['tcf'] = {})))
    </script>
</head>
<body>
<div id="root">
    <style type='text/css'>:root {
            --skeleton-padding: 46px;
            --skeleton-height: 100vh;
            --skeleton-skeleton: linear-gradient(lightgrey var(--skeleton-height), transparent 0);
            --avatar-size: 80px;
            --avatar-position: var(--skeleton-padding) var(--skeleton-padding);
            --avatar-skeleton: radial-gradient(circle 40px at center, white 99%, transparent 0);
            --title-height: 48px;
            --title-width: 70vw;
            --title-position: var(--skeleton-padding) 180px;
            --title-skeleton: linear-gradient(white var(--title-height), transparent 0);
            --desc-line-height: 38px;
            --desc-line-skeleton: linear-gradient(white var(--desc-line-height), transparent 0);
            --desc-line-1-width: 50vw;
            --desc-line-1-position: var(--skeleton-padding) 280px;
            --desc-line-2-width: 75vw;
            --desc-line-2-position: var(--skeleton-padding) 360px;
            --footer-height: 200px;
            --footer-position: 0 calc(var(--skeleton-height) - var(--footer-height));
            --footer-skeleton: linear-gradient(gray var(--footer-height), transparent 0);
            --blur-width: 200px;
            --blur-size: var(--blur-width) calc(var(--skeleton-height) - var(--footer-height));
        }

        .skeleton {
            width: 100vw;
            height: var(--skeleton-height);
        }

        .skeleton:empty::after {
            content: '';
            display: block;
            width: 100%;
            height: 100%;
            border-radius: 6px;
            box-shadow: 0 10px 45px rgba(0, 0, 0, 0.1);
            background-image: linear-gradient(90deg, rgba(211, 211, 211, 0) 0, rgba(211, 211, 211, 0.8) 50%, rgba(211, 211, 211, 0) 100%), var(--title-skeleton), var(--desc-line-skeleton), var(--desc-line-skeleton), var(--avatar-skeleton), var(--footer-skeleton), var(--skeleton-skeleton);
            background-size: var(--blur-size), var(--title-width) var(--title-height), var(--desc-line-1-width) var(--desc-line-height), var(--desc-line-2-width) var(--desc-line-height), var(--avatar-size) var(--avatar-size), 100% var(--footer-height), 100% 100%;
            background-position: -200% 0, var(--title-position), var(--desc-line-1-position), var(--desc-line-2-position), var(--avatar-position), var(--footer-position), 0 0;
            background-repeat: no-repeat;
            -webkit-animation: loading 1.5s infinite;
            animation: loading 1.5s infinite;
        }

        @-webkit-keyframes loading {
            to {
                background-position: 350% 0, var(--title-position), var(--desc-line-1-position), var(--desc-line-2-position), var(--avatar-position), var(--footer-position), 0 0;
            }
        }

        @keyframes loading {
            to {
                background-position: 350% 0, var(--title-position), var(--desc-line-1-position), var(--desc-line-2-position), var(--avatar-position), var(--footer-position), 0 0;
            }
        }</style>
    <div class='skeleton'></div>
</div>
</body>
<script type="text/javascript">
    window.clientSideRender();
</script>
<script src="//cdn.bootcss.com/eruda/1.1.3/eruda.min.js"></script>
<script>eruda.init();</script>
</html>
